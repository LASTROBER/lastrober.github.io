[{"content":"Bilibili 视频数据分析工具 内容： 这是一个用于分析Bilibili视频数据的Python工具。\n可以根据指定的视频CID获取视频信息、用户统计、视频标签、弹幕数据 将数据源传递给deepseek并分析弹幕内容与可视化处理。 功能 获取视频基本信息(标题、时长、作者等) 获取视频作者的粉丝数和关注数 获取视频标签 获取视频弹幕数据 分析弹幕内容和发送时间 生成弹幕时间分布图表 通过Web界面展示分析结果 依赖 Python 3.x requests matplotlib numpy Flask openai (可选,用于AI分析) markdown2 引入头文件 1 2 3 4 5 6 7 8 9 10 11 12 import requests import json import xml.etree.ElementTree as ET from datetime import datetime import matplotlib.pyplot as plt import numpy as np import time from openai import OpenAI from flask import Flask, jsonify, render_template from markdown2 import Markdown from datetime import datetime import urllib3 项目函数构成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def get_video_info(video_id): def get_user_stats(mid): def get_video_tags(video_id): def get_danmaku(video_id, max_count=50): def analyze_danmaku(danmaku_list, title, tags, view, danmaku, reply, favorite, coin, share, like): def prepare_chart_data(danmaku_times, duration): def prepare_real_time_data(danmaku_real_times): @app.route(\u0026#39;/\u0026#39;) def get_data(): @app.route(\u0026#39;/get_data\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def get_bilibili_data(): if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=True) ver1.0.0 获取视频标题函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def get_video_title(video_id): # 获取视频的标题 url = f\u0026#34;https://api.bilibili.com/x/web-interface/view?bvid={video_id}\u0026#34; headers = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\u0026#39; } response = requests.get(url, headers=headers) if response.status_code != 200: print(f\u0026#34;Failed to get video title, status code: {response.status_code}\u0026#34;) return None try: data = response.json() except json.JSONDecodeError: print(\u0026#34;Failed to decode JSON response\u0026#34;) return None title = data[\u0026#39;data\u0026#39;][\u0026#39;title\u0026#39;] return title 获取视频标签函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_video_tags(video_id): # 获取视频的标签 url = f\u0026#34;https://api.bilibili.com/x/tag/archive/tags?bvid={video_id}\u0026#34; headers = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\u0026#39; } response = requests.get(url, headers=headers) if response.status_code != 200: print(f\u0026#34;Failed to get video tags, status code: {response.status_code}\u0026#34;) return None try: data = response.json() except json.JSONDecodeError: print(\u0026#34;Failed to decode JSON response\u0026#34;) return None tags = [tag[\u0026#39;tag_name\u0026#39;] for tag in data[\u0026#39;data\u0026#39;]] return tags 根据视频的CID解析弹幕 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_danmaku(video_id): # 获取视频的cid url = f\u0026#34;https://api.bilibili.com/x/player/pagelist?bvid={video_id}\u0026amp;jsonp=jsonp\u0026#34; headers = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\u0026#39; } response = requests.get(url, headers=headers) if response.status_code != 200: print(f\u0026#34;Failed to get cid, status code: {response.status_code}\u0026#34;) return None try: data = response.json() except json.JSONDecodeError: print(\u0026#34;Failed to decode JSON response\u0026#34;) return None cid = data[\u0026#39;data\u0026#39;][0][\u0026#39;cid\u0026#39;] # 获取弹幕信息 danmaku_url = f\u0026#34;https://api.bilibili.com/x/v1/dm/list.so?oid={cid}\u0026#34; danmaku_response = requests.get(danmaku_url, headers=headers) if danmaku_response.status_code != 200: print(f\u0026#34;Failed to get danmaku, status code: {danmaku_response.status_code}\u0026#34;) return None danmaku_response.encoding = \u0026#39;utf-8\u0026#39; danmaku_data = danmaku_response.text # 解析弹幕XML root = ET.fromstring(danmaku_data) danmaku_list = [d.text for d in root.findall(\u0026#39;.//d\u0026#39;)] danmaku_count = len(danmaku_list) return danmaku_list, danmaku_count 将视频的弹幕转为字符串，并调用deepseekAPI来分析内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def analyze_danmaku(danmaku_list): # 将弹幕列表转换为字符串 danmaku_text = \u0026#34;\\n\u0026#34;.join(danmaku_list) client = OpenAI(api_key=\u0026#34;sk-159747718eeb4e73ba4f002640d7a10a\u0026#34;, base_url=\u0026#34;https://api.deepseek.com\u0026#34;) response = client.chat.completions.create( model=\u0026#34;deepseek-chat\u0026#34;, messages=[ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;下列是一串b站视频弹幕，标题为：\u0026#34;+title+\u0026#34;，tag为：\u0026#34;+tags+\u0026#34;请根据这些内容分析并总结\u0026#34;}, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: danmaku_text}, ], stream=False ) resault =response.choices[0].message.content return resault 主函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if __name__ == \u0026#34;__main__\u0026#34;: video_id = \u0026#34;\u0026lt;\u0026lt;视频ID\u0026gt;\u0026gt;\u0026#34; # 替换为你要查询的视频ID title = get_video_title(video_id) if title: print(f\u0026#34;Video Title: {title}\u0026#34;) tags = get_video_tags(video_id) if tags: print(f\u0026#34;Video Tags: {\u0026#39;, \u0026#39;.join(tags)}\u0026#34;) danmaku_list, danmaku_count = get_danmaku(video_id) if danmaku_list: for danmaku in danmaku_list: print(danmaku) print(f\u0026#34;Total danmaku count: {danmaku_count}\u0026#34;) # 调用DeepSeek API分析弹幕内容 analysis_result = analyze_danmaku(danmaku_list) if analysis_result: print(\u0026#34;DeepSeek Analysis Result:\u0026#34;) print(analysis_result) else: print(\u0026#34;Failed to get danmaku\u0026#34;) ver1.0.1 内容：添加统计功能，优化获取的数据\n优化———获取该视频更详细的数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def get_video_info(video_id): # 获取视频的标题、时长、作者及其他详细信息 url = f\u0026#34;https://api.bilibili.com/x/web-interface/view?bvid={video_id}\u0026#34; headers = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\u0026#39; } response = requests.get(url, headers=headers) if response.status_code != 200: print(f\u0026#34;Failed to get video info, status code: {response.status_code}\u0026#34;) return None, None, None, None, None, None, None, None, None, None, None try: data = response.json() except json.JSONDecodeError: print(\u0026#34;Failed to decode JSON response\u0026#34;) return None, None, None, None, None, None, None, None, None, None, None title = data[\u0026#39;data\u0026#39;][\u0026#39;title\u0026#39;] duration = data[\u0026#39;data\u0026#39;][\u0026#39;duration\u0026#39;] # 视频时长，单位为秒 author = data[\u0026#39;data\u0026#39;][\u0026#39;owner\u0026#39;][\u0026#39;name\u0026#39;] author_mid = data[\u0026#39;data\u0026#39;][\u0026#39;owner\u0026#39;][\u0026#39;mid\u0026#39;] pubdate = datetime.fromtimestamp(data[\u0026#39;data\u0026#39;][\u0026#39;pubdate\u0026#39;]) # 视频发布时间 view = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;view\u0026#39;] # 播放数 danmaku = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;danmaku\u0026#39;] # 弹幕数 reply = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;reply\u0026#39;] # 评论数 favorite = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;favorite\u0026#39;] # 收藏数 coin = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;coin\u0026#39;] # 投币数 share = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;share\u0026#39;] # 分享数 like = data[\u0026#39;data\u0026#39;][\u0026#39;stat\u0026#39;][\u0026#39;like\u0026#39;] # 点赞数 return title, duration, author, author_mid, pubdate, view, danmaku, reply, favorite, coin, share, like 优化———传递多元化数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def analyze_danmaku(danmaku_list, title, tags, view, danmaku, reply, favorite, coin, share, like): # 将弹幕内容转换为字符串 danmaku_text = \u0026#34;\\n\u0026#34;.join([text for _, text in danmaku_list]) client = OpenAI(api_key=\u0026#34;sk-159747718eeb4e73ba4f002640d7a10a\u0026#34;, base_url=\u0026#34;https://api.deepseek.com\u0026#34;) response = client.chat.completions.create( model=\u0026#34;deepseek-chat\u0026#34;, messages=[ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;下列是一串b站视频弹幕，标题为：\u0026#34; + title + \u0026#34;，tag为：\u0026#34; + \u0026#39;, \u0026#39;.join(tags) + \u0026#34;播放量为：\u0026#34;+str(view)+\u0026#34;,弹幕数为：\u0026#34;+str(danmaku)+\u0026#34;,评论数为：\u0026#34;+str(reply)+\u0026#34;,分享数为：\u0026#34;+str(share)+\u0026#34;,点赞数为\u0026#34;+str(like)+\u0026#34;，收藏数为：\u0026#34;+str(favorite)+\u0026#34;，硬币数为\u0026#34;+str(coin)+\u0026#34;。请根据这些内容分析并总结，内容包括：1、概括弹幕内容；2、分析弹幕的情绪；3、分析所提供的数据；4、根据这些数据提出合理化的建议，并给出理由。\u0026#34;}, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: danmaku_text}, ], stream=False ) result = response.choices[0].message.content return result 绘制统计图 绘制相对于视频时间的热度直方图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def plot_danmaku_ratios(danmaku_times, duration): # 将弹幕时间转换为相对于视频总长度的占比 danmaku_ratios = [time / duration for time in danmaku_times] # 根据视频时长划分时间段 bins = np.linspace(0, 1, 21) # 将视频分成20个时间段，每个时间段占比5% # 绘制直方图 counts, _, _ = plt.hist(danmaku_ratios, bins=bins, edgecolor=\u0026#39;black\u0026#39;, align=\u0026#39;left\u0026#39;) # 绘制曲线图 bin_centers = 0.5 * (bins[1:] + bins[:-1]) plt.plot(bin_centers, counts, \u0026#39;-o\u0026#39;, color=\u0026#39;red\u0026#39;) plt.xlabel(\u0026#39;时间占比\u0026#39;) plt.ylabel(\u0026#39;弹幕数量\u0026#39;) plt.title(\u0026#39;弹幕时间分布（按时间占比）\u0026#39;) plt.xticks(bins, [f\u0026#39;{int(b*100)}%\u0026#39; for b in bins]) plt.show() 绘制相对于现实时间的热度直方图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def plot_danmaku_real_times(danmaku_real_times): # 将弹幕实际发送时间转换为小时 danmaku_hours = [time.hour for time in danmaku_real_times] # 绘制一天中发送弹幕的统计直方图 bins = np.arange(0, 25) # 24小时制 counts, _, _ = plt.hist(danmaku_hours, bins=bins, edgecolor=\u0026#39;black\u0026#39;, align=\u0026#39;left\u0026#39;) # 绘制曲线图 bin_centers = 0.5 * (bins[1:] + bins[:-1]) plt.plot(bin_centers, counts, \u0026#39;-o\u0026#39;, color=\u0026#39;red\u0026#39;) plt.xlabel(\u0026#39;时间 (小时)\u0026#39;) plt.ylabel(\u0026#39;弹幕数量\u0026#39;) plt.title(\u0026#39;一天中弹幕发送时间分布\u0026#39;) plt.xticks(bins) plt.show() 获取用户的关注数和粉丝数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def get_user_stats(mid): # 获取用户的关注数和粉丝数 url = \u0026#34;https://api.bilibili.com/x/relation/stat\u0026#34; params = { \u0026#34;vmid\u0026#34;: mid, \u0026#34;jsonp\u0026#34;: \u0026#34;jsonp\u0026#34; } headers = { \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\u0026#34; } response = requests.get(url, params=params, headers=headers) if response.status_code != 200: print(f\u0026#34;Failed to get user stats, status code: {response.status_code}\u0026#34;) return None, None try: data = response.json() except json.JSONDecodeError: print(\u0026#34;Failed to decode JSON response\u0026#34;) return None, None if data.get(\u0026#34;code\u0026#34;) == 0: following = data[\u0026#34;data\u0026#34;][\u0026#34;following\u0026#34;] follower = data[\u0026#34;data\u0026#34;][\u0026#34;follower\u0026#34;] return following, follower else: print(\u0026#34;Failed to get user stats, response code:\u0026#34;, data.get(\u0026#34;code\u0026#34;)) return None, None github仓库地址(私有)\nver1.0.2 内容：在web前端使用Flask部署、chart.js优化数据展示、提供动态查询页面\nchart.js的script路径配置：\n1 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 格式化输出： 各函数return返回结果改为json格式 eg1：\n1 2 3 4 5 6 7 8 9 10 11 12 13 return json.dumps({ \u0026#34;title\u0026#34;: title, \u0026#34;duration\u0026#34;: duration, \u0026#34;author\u0026#34;: author, \u0026#34;author_mid\u0026#34;: author_mid, \u0026#34;pubdate\u0026#34;: pubdate.isoformat(), \u0026#34;view\u0026#34;: view, \u0026#34;danmaku\u0026#34;: danmaku, \u0026#34;reply\u0026#34;: reply, \u0026#34;favorite\u0026#34;: favorite, \u0026#34;coin\u0026#34;: coin, \u0026#34;share\u0026#34;: share, \u0026#34;l }) eg2：\n1 2 3 4 5 6 return json.dumps({ \u0026#34;danmaku_list\u0026#34;: danmaku_list, \u0026#34;danmaku_times\u0026#34;: danmaku_times, \u0026#34;danmaku_real_times\u0026#34;: [time.isoformat() for time in danmaku_real_times], \u0026#34;danmaku_count\u0026#34;: danmaku_count }) Flask框架 app.route路径中添加get_data函数，返回json格式数据，并且需要创建一个index.html页面（放在templates文件夹中），在index.html页面中使用data展示数据\n1 2 3 4 5 6 app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def get_data(): data = get_bilibili_data() return render_template(\u0026#39;index.html\u0026#39;, data=jsonify(data)) get_bilibili_data()函数用来获取通过bilibiliApi和deepseekApi返回的数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def get_bilibili_data(): video_id = \u0026#34;BV1a8wKeeESd\u0026#34; # 替换为你要查询的视频ID result = {} video_info = json.loads(get_video_info(video_id)) result[\u0026#34;video_info\u0026#34;] = video_info author_stats = json.loads(get_user_stats(video_info[\u0026#34;author_mid\u0026#34;])) result[\u0026#34;author_stats\u0026#34;] = author_stats tags = json.loads(get_video_tags(video_id)) result[\u0026#34;tags\u0026#34;] = tags danmaku_data = json.loads(get_danmaku(video_id)) result[\u0026#34;danmaku_data\u0026#34;] = danmaku_data analysis_result = json.loads(analyze_danmaku( danmaku_data[\u0026#34;danmaku_list\u0026#34;], video_info[\u0026#34;title\u0026#34;], tags, video_info[\u0026#34;view\u0026#34;], video_info[\u0026#34;danmaku\u0026#34;], video_info[\u0026#34;reply\u0026#34;], video_info[\u0026#34;favorite\u0026#34;], video_info[\u0026#34;coin\u0026#34;], video_info[\u0026#34;share\u0026#34;], video_info[\u0026#34;like\u0026#34;] )) result[\u0026#34;analysis\u0026#34;] = analysis_result print(result) return result 优化数据展示 思路解释：\n函数中返回danmaku_times、duration、danmaku_real_times等数据\n经过**prepare_chart_data(danmaku_times, duration)与prepare_real_time_data(danmaku_real_times)**这两个函数二次处理后生成list数据。\n传递给script中，由 const realTimeChartData与const charData这两个变量接收。\n参照chart.js官方文档，使用chart.js绘制图表\n阶段成功展示： 你可以发现，在最后一个统计中弹幕突然下跌。这是因为对于一次访问，最多只能提取到1200条弹幕。下一个阶段，需要解决弹幕提取的问题：\n1.可以分阶段访问\n2.采用抽样方法。\n","date":"2025-02-13T16:27:27+08:00","image":"https://lastrober.github.io/p/%E4%BD%BF%E7%94%A8deepseekapi%E6%9D%A5%E5%88%86%E6%9E%90b%E7%AB%99%E8%A7%86%E9%A2%91%E5%BC%B9%E5%B9%95/a_hu_8608ee8a2fb7c24b.jpg","permalink":"https://lastrober.github.io/p/%E4%BD%BF%E7%94%A8deepseekapi%E6%9D%A5%E5%88%86%E6%9E%90b%E7%AB%99%E8%A7%86%E9%A2%91%E5%BC%B9%E5%B9%95/","title":"使用deepseekAPI来分析B站视频弹幕"},{"content":"","date":"2025-02-12T00:02:49+08:00","image":"https://lastrober.github.io/p/%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8Bai%E8%87%AA%E5%8A%A8%E5%8C%96%E5%86%99%E4%BD%9C/road_hu_be7b6fcaa1447135.jpg","permalink":"https://lastrober.github.io/p/%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8Bai%E8%87%AA%E5%8A%A8%E5%8C%96%E5%86%99%E4%BD%9C/","title":"尝试一下AI自动化写作"},{"content":"我是生活的逃兵 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 黑色幕布上飘飞的尘埃 不会出现 粗糙的砾石 仅在幻想中闪烁 老酒鬼叮叮当当，用瓶玻璃 演奏无头无尾的故事 一辆收垃圾的卡车 颤颤巍巍，传来伴奏 直到被深巷里 一阵浅浅的嘲笑打破 我只是个败北的逃兵 输掉了生活的战争 游荡在回忆里 舔舐生锈的伤口 泛黄的窗纸啊，窗外为何变化 天地如此广阔 却只能蜷缩在摇篮里 看着阳光潮起潮落 礼物 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 我想把黄色献给你 献予浓浓的血浆 一颗燃烧的银杏 一碗弯弯的月亮 我想把光明献给你 一盏孤独的夜灯 照亮失眠的轮船 和迷路的村庄 我想把温暖献给你 花火在严冬绽放 许你一床厚厚的梦 飞到云朵中央 我还想把爱献给你 一颗跳动的心脏 送你糖纸制成的裙摆 和满座果林的芬芳 把流星一样的灵感 和长久的叹息 把过去的记忆和未来的期许 把血脉中先祖的魂灵 都献给你 岸边树，江边塔 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 只剩一只宝塔 静静，从尘埃中远望 看见那岸的边的树 在水中 不知所措地立正 在风中 无聊地颤抖 迟钝、迟钝地 借助每个模糊的目光 生长 我是那千万中的一个 总是幻想，在某个时刻死去 披着厚重的寄托 同黄昏枯萎 太阳在地平线下燃烧 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 扭曲的水泥，筋骨刺向天空 废弃停车场里，杂草身披红锈 一只沉眠的巨兽 被兀鹫分食 它也想站起 却又重重坠落 高傲的雨滴，迫不及待地 打在铁板上 用高低不一的呐喊 宣告一群魂魄的灭亡 模糊的合照，贴在窗中 里面的人抬头看着 车灯仓促 残余在失眠大地上 另一个世界的梦影 从身边茫然驶过 孩子在铁锈中长大 面黄肌瘦，挂着惨白的笑 玻璃渣映照千张面孔 躺在滚烫的铁轨下 此刻 1 2 3 4 5 6 7 8 9 10 11 12 13 沉睡一个遥远的午后 群山背负天空，被墨色鱼群吞咽 孤高的目光，从灯塔上袭来 飘飞的帘幕，包裹赤裸的心 夜空只剩，半边眼睛 那颗过期的星斑 留在了橡树的年轮里 把这一小片永恒，递给未来 代价是重复 一段逃逸现实的叹息 和抛弃所有 早已在风中消散的旋律 ","date":"2025-02-11T22:58:22+08:00","image":"https://lastrober.github.io/p/%E6%88%91%E7%9A%84%E8%AF%97/bike_hu_2bbea78f8aadf84c.jpg","permalink":"https://lastrober.github.io/p/%E6%88%91%E7%9A%84%E8%AF%97/","title":"我的诗"},{"content":"解决\u0026quot;OpenSSL SSL_read: SSL_ERROR\u0026quot; 更新 OpenSSL： 确保你的 OpenSSL 是最新版本。你可以从 OpenSSL 官方网站下载并安装最新版本。\ngit update-git-for-windows\n切换到 SSH： 如果 HTTPS 访问有问题，可以尝试使用 SSH 访问。首先，生成 SSH 密钥并添加到 GitHub，然后运行以下命令切换到 SSH：\ngit remote set-url origin git@github.com:LASTROBER/lastrober.github.io.git\n验证远程仓库： 确认远程仓库配置正确：\ngit remote -v\n推送代码： 最后，尝试推送代码到远程仓库：\ngit push -u origin master\n解决\u0026quot;Failed to connect to github.com port 443\u0026quot; 这个错误表明你的网络连接到 GitHub 服务器时遇到了问题。\n使用 SSH 代替 HTTPS： 生成 SSH 密钥并添加到 GitHub： ssh-keygen -t rsa -b 4096 -C \u0026quot;your_email@example.com\u0026quot;\n启动 SSH 代理： 在生成密钥后，启动 SSH 代理并添加你的 SSH 私钥： eval \u0026quot;$(ssh-agent -s)\u0026quot; ssh-add ~/.ssh/id_rsa\n复制 SSH 公钥： 复制生成的 SSH 公钥到剪贴板： clip \u0026lt; ~/.ssh/id_rsa.pub\n这条命令会将公钥复制到剪贴板。如果 clip 命令不可用，你可以手动打开 id_rsa.pub 文件并复制其内容。\n添加 SSH 公钥到 GitHub：\n登录到你的 GitHub 账户。 进入 Settings（设置）。 在左侧菜单中选择 SSH and GPG keys。 点击 New SSH key 按钮。 在 Title 字段中输入一个描述性名称（例如 \u0026ldquo;My Laptop\u0026rdquo;）。 在 Key 字段中粘贴你刚刚复制的 SSH 公钥。 点击 Add SSH key 按钮。 测试 SSH 连接： 你可以通过以下命令测试是否成功连接到 GitHub： ssh -T git@github.com\n如果一切正常，你会看到类似以下的输出： Hi username! You've successfully authenticated, but GitHub does not provide shell access.\n按提示操作，然后将生成的公钥添加到 GitHub 账户中。切换到 SSH 远程仓库： 1 git remote set-url origin git@github.com:LASTROBER/lastrober.github.io.git 完成这些步骤后，你就可以使用 SSH 连接到 GitHub 了。接下来，你可以切换到 SSH 远程仓库并推送代码：\n1 git remote set-url origin git@github com:LASTROBER/letere-lastrober.github.io.git git push -u origin master 检查 Git 配置： 确保 Git 配置正确： git config --global http.sslVerify false\n推送到正确分支 检查当前分支： 确保你在正确的分支上。你可以使用以下命令查看当前分支： git branch\n如果你在 main 分支上，输出应该类似于：\n* main\n切换到 main 分支（如果需要）： 如果你不在 main 分支上，可以使用以下命令切换到 main 分支：\ngit checkout -b main\n添加远程仓库： 确保远程仓库 URL 是正确的。你可以使用以下命令查看当前配置的远程仓库 URL：\ngit remote -v\n确保输出的 URL 是正确的。如果不正确，可以使用以下命令更新远程仓库 URL：\ngit remote set-url origin git@github.com:LASTROBER/lastrober.github.io.git\n推送代码到远程仓库： 现在你可以推送代码到远程仓库：\ngit push -u origin main\n禁用SSH连接：\n1 git config --global http.sslVerify false ","date":"2025-02-11T21:51:53+08:00","image":"https://lastrober.github.io/p/%E8%A7%A3%E5%86%B3openssl-ssl_read-ssl_error/angel_hu_9aca23180a0cbcf6.jpg","permalink":"https://lastrober.github.io/p/%E8%A7%A3%E5%86%B3openssl-ssl_read-ssl_error/","title":"解决OpenSSL SSL_read: SSL_ERROR"},{"content":"你好，世界 我的Github账号\n","date":"2025-02-11T16:14:06+08:00","permalink":"https://lastrober.github.io/p/helloworld/","title":"HelloWorld"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://lastrober.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://lastrober.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://lastrober.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://lastrober.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://lastrober.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://lastrober.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://lastrober.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://lastrober.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://lastrober.github.io/p/emoji-support/","title":"Emoji Support"}]